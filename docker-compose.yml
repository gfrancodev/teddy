services:
  db:
    container_name: teddy_db
    image: postgres:17
    ports:
      - "5432:5432"
    env_file:
      - ./backend/.env.db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - teddy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d teddy"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-migration:
    container_name: teddy_db_migration
    image: postgres:17
    volumes:
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    env_file:
      - ./backend/.env.db
    command: >
      bash -c "until pg_isready -h db -U user -d teddy; do
               echo 'Aguardando banco de dados...';
               sleep 2;
               done;
               echo 'Aplicando schema...';
               psql -h db -U user -d teddy -f /docker-entrypoint-initdb.d/schema.sql"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - teddy-network

  db-seed:
    container_name: teddy_db_seed
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    command: >
      sh -c "cd /app/backend && 
             npm install && 
             npx ts-node database/seed.ts"
    env_file:
      - ./backend/.env
      - ./backend/.env.db
    depends_on:
      db-migration:
        condition: service_completed_successfully
    networks:
      - teddy-network

  backend:
    container_name: teddy_backend
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    env_file:
      - ./backend/.env
    ports:
      - "4000:3000"
    depends_on:
      db-seed:
        condition: service_completed_successfully
    networks:
      - teddy-network

  frontend:
    container_name: teddy_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_PORT=8000
      - VITE_API_URL=http://localhost:4000
    networks:
      - teddy-network
    depends_on:
      - backend

networks:
  teddy-network:
    driver: bridge

volumes:
  postgres_data:
    name: teddy_postgres_data
